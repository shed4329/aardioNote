表
	｛｝创造table，用；分割，最后一个分号可以忽略
		tab = {2,3,4}
		控制台打印
		[1] = 2
		[2] = 3
		[3] = 4
		具有索引
		tab = {2,3,4,x=100,y=200}//这是一个混合表
		x = 100
		y = 200
		[1] = 2
		[2] = 3
		[3] = 4
		
		表操作
			tab = {2;3;4;x=100;y=200}
			string.join(tab);
			//结果是234	，x=100,y=200算键值对，string.join操作值	
			//可以写x = "汉字"
		除了null的任意值都可以做索引，null可以做键名
		t[null]不合法,t["null"]合法
		tab.x tab.y,tab["x"],tab[1]都可以访问数组内变量
	数组
		下标从1开始
		以数组的方式访问字符串
			str = "4616"
			console.log(str[1],str[2]);//输出ascii码
			console.log(str[[1]],str[[2]]);//输出字符
			str[1] = 100;//不能写入，只能读取,而且只能读一个字节,不能读汉字
			//要获取就用string.sub(str,1,1,true);
		添加数据
			tab = {"aa';"bb";"cc";"dd");
			table.push(tab,"ff");//添加到数组的最后
		插入数据
			table.insert(tab,"gg",2);
			//结果 aa gg bb cc dd ff
		修改数据
			tab[4] = "修改了";
		删除元素
			1.移除方法//维持数组顺序
				table.remove(tab,3);
				//aa,bb,dd 只有三个元素了
			2.赋值为null//维持个数
				tab[3]=null
				//aa,bb,null,dd 还是四个元素
		元素数量
			获取从1开始的连续整数下标的数组元素
				len = #tab;
				len = table.len(tab);
			如果数组不连续
				tab = {[3] = "3";[5] = "5"};//指定下标来创建
				[3] = 3
				[9] = 9;
				不连续，如果是[1][2][3][5],从一开始连续的，长度为3，否则为0
				如果[1]是null，会后面的值会顶替
		遍历数组
			for(i=1;#tab;1){//从小到大
			
			}
			for(i=#tab;1;-1){//从大到小
			
			}
		清空数组
			for(i=#tab;1;-1){//从大到小
				table.remove(tab,i);//从小到大会顶替
			}
			
			for(i=1;#tab;1){//从大到小
				table.remove(1);//利用顶替
			}
			
			tab={};//也可以这样删除
		//混合表包含数组
		数组排序
			tab = {[1]=null;"cc";"aa";"dd";"bb"};
			table.sort(tab);//对数组排序，可以不连续，只会排列连续部分，不支持键值对函数，默认从小到大
			table.sort(tab,function(a){
				return a<owner;//从大到小排 
			});
	键值表
		定义键值表
			合法标识符直接使用
				tab = {x=100;left=3000;昵称="mick"};
			数字键名加[],不加中括号就是布尔值
				tab = ｛[2]=100;[333]=30};
			不合法的标识符用中括号和引号
				tab = ｛["if"]=100;["else"]=300;["???"]=200;["X-Requested-With"]="XMLHttpRequest"};
		添加键值
			1.tab.y=200
			2.tab["tcp"]=400
			3.tab[11]=400
		删除键值
			tab.x = null;
		键值对总个数
			tab={"aa";"bb";"cc";"dd";x=100;[2]=100;[333]=300};
			var len = table.count(tab);//结果是六，好像x=100,[2]=100算一个
		遍历键值表
			1.for循环
			for(i=1;#tab;1){
				console.log(tab[i]);
			}
			2.for in循环
			for(k,v in tab){//k：键名，v：键值，无序循环
				console.log(k,v);
			}
		清空表
			1.for(k,v in tab){
				tab[k] = null;
			}
			2.tab={};
		键值表排序
			tab = {a=10;c=15;d=5;m=0;z=3};
			for name,value in table.eachName(tab,func){//迭代函数，键值按顺序排列
				
			}
			
			func = function(a){//倒序排序函数
				return a<owner;
			}
			eg.统计字符出现次数，并排序
			tab = {};
			for(i=1;15;1){
				table.push(tab,string.random(5,"0123456789"));//随机字符串
			}
			
			tabNumber = {["0"]=0;["1"]=0;["2"]=0;["3"]=0;["4"]=0;["5"]=0;["6"]=0;["7"]=0;["8"]=0;["9"]=0};
			for(i=1;#tab;1){
				var n = tab[i][[5]];
				tabNumber[n]++;
			}
			console.varDump(tabNumer);
			
			tabNew = {};
			for(k,v in tabNumber){//无需排序
				table.push(tabNew,{k;v});//二维表
			}
			
			table.sort(tabNew,function(a){
				return a[2]>owner[2];//从小到大
			});
			
			for（i=1;3;1){
				console.log(tabNew[i][1],tabNew[i][2]);//输出排名前三的三个
			}	
